import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useEffect } from 'react';

import Header from '../../components/Header';
import { useAuth } from '../../hooks/useAuth';
import { fetchRefreshToken } from '../../helpers/fetchers';
import JWT, { decrypt } from '../../helpers/Encrypt';
import {
  setCookieAt, setCookieRt, destroyCookie, parseCookies,
} from '../../helpers/cookie';

interface IServerSideProps {
  email: string;
}

export default function MainPage({ email: propEmail }: IServerSideProps) {
  const { email, setEmail } = useAuth();

  useEffect(() => {
    if (email === '') {
      setEmail(propEmail);
    }
  }, []);

  return (
    <div>
      <Head>
        <title>Main Page - Trybe Social</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      <h1>Main Page</h1>
      <h2>Você está logado com o email: {email}</h2>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { tokenAt: encryptAt, tokenRt: encryptRt } = parseCookies(ctx);
  let tokenAt = decrypt(encryptAt);
  const tokenRt = decrypt(encryptRt);

  if (!tokenRt) {
    destroyCookie('tokenAt', ctx);
    return {
      props: {},
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }

  const jwt = new JWT();

  if (!tokenAt) {
    const { userId } = jwt.decode(tokenRt);
    const { acessToken, refreshToken } = await fetchRefreshToken(
      tokenRt,
      userId,
    );

    if (acessToken && refreshToken) {
      tokenAt = acessToken;

      setCookieAt('tokenAt', acessToken, ctx);

      setCookieRt('tokenRt', refreshToken, ctx);
    } else {
      destroyCookie('tokenRt', ctx);
      return {
        props: {},
        redirect: {
          destination: '/login',
          permanent: false,
        },
      };
    }
  }

  const { email } = jwt.decode(tokenAt);

  return {
    props: {
      email,
    },
  };
};
