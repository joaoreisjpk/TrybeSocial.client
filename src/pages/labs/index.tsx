import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';

import { createLab, fetchRefreshToken, listLabs } from '../../helpers/fetchers';
import JWT, { decrypt } from '../../helpers/Encrypt';
import {
  setCookieAt,
  setCookieRt,
  destroyCookie,
  parseCookies,
} from '../../helpers/cookie';
import Header from '../../components/Header';
import JobItem from '../../components/JobItem';
import { IJob } from '../../helpers/interfaces';
import TrybeModal from '../../components/TrybeModal';
import MUIButton from '../../components/UI/MUIButton';

export default function Labs() {
  const [LabsList, setLabsList] = useState<IJob[]>([]);
  const [isCreateLabModalOpen, setIsCreateLabModalOpen] = useState(false);

  async function getLabsList() {
    setLabsList(await listLabs());
  }

  async function postNewLab() {
    await createLab({ name: '#koeeee negada', link: 'https://www.youtube.com/?gl=BR&hl=pt' });
    await getLabsList();
    setIsCreateLabModalOpen(false);
  }

  useEffect(() => {
    getLabsList();
  }, []);

  return (
    <div>
      <Head>
        <title>Labs - Trybe Social</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      <h1>Labs</h1>
      <MUIButton onClick={() => setIsCreateLabModalOpen(true)}>Criar novo Lab</MUIButton>{' '}

      {LabsList.map((data) => <JobItem data={data} key={data.name}/>)}
      <TrybeModal
        title='Criar nova Lab'
        body='Criar novo Labb'
        onSubmit={postNewLab}
        show={isCreateLabModalOpen}
        setShow={setIsCreateLabModalOpen}
      />
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { tokenAt: encryptAt, tokenRt: encryptRt } = parseCookies(ctx);
  let tokenAt = decrypt(encryptAt);
  const tokenRt = decrypt(encryptRt);

  if (!tokenRt) {
    destroyCookie('tokenAt', ctx);
    return {
      props: {},
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }

  const jwt = new JWT();

  if (!tokenAt) {
    const { userId } = jwt.decode(tokenRt);
    const { acessToken, refreshToken } = await fetchRefreshToken(
      tokenRt,
      userId,
    );

    if (acessToken && refreshToken) {
      tokenAt = acessToken;

      setCookieAt('tokenAt', acessToken, ctx);

      setCookieRt('tokenRt', refreshToken, ctx);
    } else {
      destroyCookie('tokenRt', ctx);
      return {
        props: {},
        redirect: {
          destination: '/login',
          permanent: false,
        },
      };
    }
  }

  return {
    props: {},
  };
};
