import Head from 'next/head';
import { useRouter } from 'next/router';
import { GetServerSideProps } from 'next';
import { MouseEvent, useState } from 'react';
import Button from 'react-bootstrap/Button';
import Container from 'react-bootstrap/Container';
import Form from 'react-bootstrap/Form';

import Header from '../../components/Header';
import FormInput from './_formInput';
import * as Validation from '../../helpers/validation';
import { useAuth } from '../../hooks/useAuth';
import { fetchLogin, fetchRefreshToken } from '../../helpers/fetchers';
import JWT, { decrypt, encrypt } from '../../helpers/Encrypt';
import { setCookieAt, setCookieRt, destroyCookie, parseCookies } from '../../helpers/cookie';

const INITIAL_CONDITION = {
  valid: false,
  invalid: false,
  msg: '',
};

const jwt = new JWT();

export default function Login() {
  const { push } = useRouter();
  const [user, setUser] = useState('');
  const [password, setPassword] = useState('');
  const [emailCondition, setEmailCondition] = useState(INITIAL_CONDITION);
  const [passwordCondition, setPasswordCondition] = useState(INITIAL_CONDITION);
  const [unauthorized, setUnauthotorized] = useState('');
  const { setEmail } = useAuth();

  const emailValidation = (emailValue: string) => {
    const emailResult = Validation.emailVerifier(emailValue);
    if (emailResult) {
      return setEmailCondition({
        valid: false,
        invalid: true,
        msg: emailResult,
      });
    }

    setEmailCondition({ valid: true, invalid: false, msg: '' });
  };

  const passwordValidation = (passwordValue: string) => {
    const passwordResult = Validation.passwordVerifier(passwordValue);
    if (passwordResult) {
      return setPasswordCondition({
        valid: false,
        invalid: true,
        msg: passwordResult,
      });
    }

    setPasswordCondition({ valid: true, invalid: false, msg: '' });
  };

  const handleButtonDisable = () => {
    return (
      !!Validation.emailVerifier(user) ||
      !!Validation.passwordVerifier(password)
    );
  };

  const handleClick = async (
    e: MouseEvent<HTMLButtonElement, globalThis.MouseEvent>
  ) => {
    e.preventDefault();

    const body = JSON.stringify({
      email: user,
      password: encrypt(password),
    });

    const { acess_token, refresh_token, error } = await fetchLogin(body);

    if (acess_token && refresh_token) {
      setCookieAt('tokenAt', acess_token);
      setCookieRt('tokenRt', refresh_token);
      const { email } = jwt.decode(acess_token) as { email: string };
      setEmail(email);
      return push('/main-page');
    } else {
      setUnauthotorized(error || 'Algum erro ocorreu');
      setEmailCondition(INITIAL_CONDITION);
      setPasswordCondition(INITIAL_CONDITION);
    }
  };

  return (
    <div>
      <Head>
        <title>Login - Trybe Social</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      <Container className='d-flex mt-5 justify-content-center'>
        <Form action=''>
          <Form.Group className='mb-3'>
            <h1 className='mb-3'>Login</h1>
            <Form.Label>E-mail</Form.Label>
            <FormInput
              stateCondition={emailCondition}
              value={user}
              setValue={setUser}
              validation={emailValidation}
              name='user'
            />
          </Form.Group>
          <Form.Group className='mb-3'>
            <Form.Label>Password</Form.Label>
            <FormInput
              stateCondition={passwordCondition}
              value={password}
              setValue={setPassword}
              validation={passwordValidation}
              name='password'
            />
          </Form.Group>
          <Form.Group className='mb-3'>
            <Button
              variant='outline-dark'
              size='lg'
              onClick={handleClick}
              type='submit'
              disabled={handleButtonDisable()}
            >
              Login
            </Button>
            <span className='m-1' />
            <Button
              variant='outline-dark'
              size='lg'
              type='button'
              onClick={() => push('/cadastro')}
            >
              Quero me Cadastrar
            </Button>
            <Form.Text className='d-block font-monospace text-danger fw-bolder'>
              {unauthorized}
            </Form.Text>
          </Form.Group>
        </Form>
      </Container>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { 'tokenRt': encryptRt } = parseCookies(ctx);
  let tokenRt = decrypt(encryptRt);

  if (tokenRt) {
    const { userId } = jwt.verify(tokenRt);
    const { acess_token, refresh_token } = await fetchRefreshToken(
      tokenRt,
      userId
    );

    if (acess_token && refresh_token) {
      setCookieAt('tokenAt', acess_token, ctx);

      setCookieRt('tokenRt', refresh_token, ctx);
      return {
        props: {},
        redirect: {
          destination: '/main-page',
          permanent: false,
        },
      };
    } else {
      destroyCookie('tokenRt', ctx);
    }
  }

  return {
    props: {},
  };
};