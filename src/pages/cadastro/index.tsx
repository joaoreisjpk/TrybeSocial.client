import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';

import { Form, Formik } from 'formik';
import { Checkbox, CircularProgress, FormControlLabel } from '@mui/material';
import Header from '../../components/Header';
import MUInput from '../../components/UI/MUInput';
import MUIButton from '../../components/UI/MUIButton';

interface ISignUpData {
  firstName: string
  lastName: string
  email: string
  password: string
  confirmPassword?: string,
  trybe?: string,
  terms?: boolean | string,
}

function formValidation(signUpData: ISignUpData) {
  const response = {} as ISignUpData;
  if (!signUpData.email.match(/^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/)) {
    response.email = 'Email Inválido';
  }
  if (signUpData.firstName.length < 4) {
    response.firstName = 'O Nome precisa ter pelo menos 4 digitos';
  }
  if (signUpData.lastName.length < 4) {
    response.lastName = 'O Sobrenome precisa ter pelo menos 4 digitos';
  }
  if (!signUpData.trybe || signUpData.trybe.length < 4) {
    response.trybe = 'A turma precisa ter pelo menos 4 digitos';
  }
  if (signUpData.password.length <= 5) {
    response.password = 'A senha precisa ter mais que 5 digitos';
  }
  if (signUpData.password !== signUpData.confirmPassword) {
    response.confirmPassword = 'As senhas precisam ser iguais';
  }
  /* if (!signUpData.terms) {
    response.terms = 'É necessário assinar os termos';
  } */

  return response;
}

export default function Login() {
  const { push } = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const handleClick = async (submitData: ISignUpData) => {
    const URL = process.env.URL || 'http://localhost:3333';

    const body = JSON.stringify(submitData);

    setIsLoading(true);
    const response = (await fetch(`${URL}/auth/signup`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body,
    }).then((data) => data.json())) as { acessToken: string } | any;

    if (response.acessToken) {
      push('/login');
      return;
    }
    setIsLoading(false);

    alert('usuário já existe');
  };

  return (
    <div>
      <Head>
        <title>Cadastro - Trybe Social</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      <Formik
        initialValues={{
          firstName: '',
          lastName: '',
          email: '',
          trybe: '',
          password: '',
          confirmPassword: '',
          terms: false,
        }}
        validate={formValidation}
        onSubmit={handleClick}
      >
        {() => (
          <Form>
            <MUInput size='medium' name='firstName' type="text" label='Nome' />
            <MUInput name='lastName' type="text" label='Sobrenome' />
            <MUInput name='email' type="text" label='E-mail' />
            <MUInput name='trybe' type="text" label='Tribo' />
            <MUInput name='password' type='password' label='Senha' />
            <MUInput name='confirmPassword' type='password' label='Confirme a senha' />
            <FormControlLabel control={<Checkbox name="terms"/>} label="Aceitar termos e condições" />
            <MUIButton
              type='submit'
              variant='contained'
              bgColor='#44b365'
              size='large'
              disabled={false}
              sx={{
                margin: '0',
                height: '3.4rem',
                width: '8rem',
              }}
            >
              {isLoading ? <CircularProgress /> : 'Login'}
            </MUIButton>
          </Form>
        )}

      </Formik>
    </div>
  );
}
